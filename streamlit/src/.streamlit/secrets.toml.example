# Snowflake connection configuration for Customer Intelligence Hub
# This file shows the required structure for secrets.toml when using both 
# database connections and Cortex Analyst functionality

# Streamlit's built-in database connection for SQL queries and dashboard data
# Used by: st.connection("snowflake") in utils/database.py and utils/utils.py
# Authentication: Private key authentication (recommended) or password authentication
# Purpose: Chart intelligence, dashboard queries, general database operations
[connections.snowflake]
account = "YOUR_SNOWFLAKE_ACCOUNT_IDENTIFIER" # e.g., SFSEEUROPE-DEMO_AROSS
user = "YOUR_SNOWFLAKE_USER" # e.g., SERVICE

# Option 1: Private key authentication (RECOMMENDED for security)
private_key_file = "/path/to/your/private_key.p8" # e.g., /Users/username/.ssh/snowflake/keys/rsa_key.p8

# Option 2: Password authentication (less secure, not recommended for production)
# password = "YOUR_SNOWFLAKE_PASSWORD" # Uncomment if using password auth instead of private key

warehouse = "YOUR_SNOWFLAKE_WAREHOUSE" # e.g., XSMALL
database = "YOUR_SNOWFLAKE_DATABASE" # e.g., DBT_CORTEX_LLMS
schema = "YOUR_SNOWFLAKE_SCHEMA" # e.g., ANALYTICS
role = "YOUR_SNOWFLAKE_ROLE" # e.g., DBT_ROLE
client_session_keep_alive = true

# Custom authentication section for Cortex Analyst REST API calls
# Used by: cortex_analyst.py for Cortex Analyst API authentication
# Authentication: PAT token authentication stored in secure file (recommended) or direct token
# Purpose: Cortex Analyst natural language queries and AI responses only
[snowflake]
account = "YOUR_SNOWFLAKE_ACCOUNT_IDENTIFIER" # Same as above
user = "YOUR_SNOWFLAKE_USER" # Same as above

# Option 1: PAT token file (RECOMMENDED for security)
pat_token_file = "/path/to/your/pat_token.txt" # e.g., /Users/username/.ssh/snowflake/keys/pat_token.txt

# Option 2: Direct PAT token (less secure, fallback option)
# pat_token = "YOUR_SNOWFLAKE_PROGRAMMATIC_ACCESS_TOKEN" # Uncomment if using direct token instead of file

# SETUP INSTRUCTIONS:
# 
# 1. PRIVATE KEY SETUP (for database connections):
#    - Generate RSA key pair: openssl genrsa -out rsa_key.pem 2048
#    - Convert to PKCS#8: openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in rsa_key.pem -out rsa_key.p8
#    - Extract public key: openssl rsa -in rsa_key.pem -pubout -out rsa_key.pub
#    - Add public key to Snowflake user: ALTER USER <username> SET RSA_PUBLIC_KEY='<public_key_content>';
#    - Store private key securely (e.g., ~/.ssh/snowflake/keys/rsa_key.p8) with 600 permissions
#
# 2. PAT TOKEN SETUP (for Cortex Analyst API):
#    - Generate PAT token via Snowsight: Admin → Users & Roles → Select User → Generate new token
#    - Or use SQL: ALTER USER <username> ADD PROGRAMMATIC ACCESS TOKEN <token_name> ROLE_RESTRICTION = '<role>' DAYS_TO_EXPIRY = <days>;
#    - Copy the token secret immediately - you won't be able to see it again
#    - Store in secure file (e.g., ~/.ssh/snowflake/keys/pat_token.txt) with 600 permissions
#    - Reference the file path in pat_token_file setting above
#
# 3. SECURITY BEST PRACTICES:
#    - Use private key authentication instead of passwords
#    - Store PAT tokens in separate files, not in version-controlled configs
#    - Set restrictive file permissions (600) on key and token files
#    - Rotate tokens regularly and set appropriate expiry dates
#    - Use different authentication methods for different purposes (database vs API)

# Add other secrets your application might need below, for example:
# another_service_api_key = "YOUR_API_KEY_HERE" 